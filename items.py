import math

TAB_WIDTH = 8
files = {}
actions = {}

# we only write /etc/fstab, if we have any config at all
if 'mount' in node.metadata:
    fstab = [
        '# generated by Bundlewrap',
    ]

    # calculate length for tab stops
    max_len_file_system = max([len(x.get('file_system', '')) for x in node.metadata.get('mount', {}).get('mounts', [])])
    max_len_mount_point = max([len(x.get('mount_point', '')) for x in node.metadata.get('mount', {}).get('mounts', [])])
    max_len_options = max([len(','.join(x.get('options', ['defaults', ]))) for x in node.metadata.get('mount', {}).
                          get('mounts', [])])

    for mount in node.metadata.get('mount', {}).get('mounts', []):
        if 'comment' in mount:
            fstab += [
                ('# ' + mount['comment']) if mount['comment'].strip() else '',
            ]
        if 'file_system' in mount:
            options = ','.join(mount.get('options', ['defaults', ]))

            file_system_tabs = math.ceil((max_len_file_system - len(mount['file_system']) - 1) / TAB_WIDTH)
            mount_point_tabs = math.ceil((max_len_mount_point - len(mount['mount_point'])) / TAB_WIDTH)
            options_tabs = math.ceil((max_len_options - len(options) - 1) / TAB_WIDTH)

            fstab += [
                '\t'.join([
                    mount['file_system'] + '\t'*file_system_tabs,
                    mount['mount_point'] + '\t'*mount_point_tabs,
                    mount.get('type', 'none'),
                    options + '\t'*options_tabs,
                    str(mount.get('dump', 0)),
                    str(mount.get('pass', 0)),
                ])
            ]

    files['/etc/fstab'] = {
        'owner': 'root',
        'group': 'root',
        'mode': '0644',
        'content': '\n'.join(fstab) + '\n',
        'triggers': ['action:mount_all', ],
    }

    actions['mount_all'] = {
        'command': 'mount -a',
        'triggered': True,
    }
